@charset "UTF-8";
/* 
今回使ってるのは所謂「リセットCSS」。まっさらな状態にしてくれる。 
中間がノーマライズCSS。割とスタイリングされてるのがサニタイズCSS。
*/
/*
html5doctor.com Reset Stylesheet
v1.6.1
Last Updated: 2010-09-17
Author: Richard Clark - http://richclarkdesign.com
Twitter: @rich_clark
*/
html, body, div, span, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
abbr, address, cite, code,
del, dfn, em, img, ins, kbd, q, samp,
small, strong, sub, sup, var,
b, i,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, figcaption, figure,
footer, header, hgroup, menu, nav, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  /* 使用者追記：ここを100%としておくことで、
  ユーザー設定のフォントサイズが反映される */
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

body {
  line-height: 1;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

nav ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

/* change colours to suit your needs */
ins {
  background-color: #ff9;
  color: #000;
  text-decoration: none;
}

/* change colours to suit your needs */
mark {
  background-color: #ff9;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

del {
  text-decoration: line-through;
}

abbr[title], dfn[title] {
  border-bottom: 1px dotted;
  cursor: help;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* change border colour to suit your needs */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #cccccc;
  margin: 1em 0;
  padding: 0;
}

input, select {
  vertical-align: middle;
}

/* 
変数の取り扱いなど、参考記事のリンクを貼っておくと良さそう。
→万が一「これは何？」となったときに参照してもらえる。
*/
/* 
@use 'foundation/variables' as v;で読むこと
*/
/* 
Responsive
*/
/* 
Font
_base.scssにて
font-family: "M+ 1m", Roboto, Arial, Meiryo, sans-serif;
が設定されている。
これ以外のフォントや優先順位に従いたくないときに使用する変数を定義
*/
/* 
Size 
参考:https://zenn.dev/tak_dcxi/articles/26280e7607bcd2
呼び出し時は
.my-button {
    font-size: v.rem(14);　←font-sizeを14px相当に
}
…のような形で呼べば、コンパイル後にrem変換してくれる
*/
/* 
About Colors
https://qiita.com/1natsu172/items/ef6b0fcba6bbe380df1e
透過度使うときは以下のように
background-color: rgba(v.$palette-black, .5);
*/
/* 
palette  
新規追加・微調整はここで。
今回はName that Color(https://chir.ag/projects/name-that-color/)で命名。
*/
/* 
colors
paletteで定義した色の呼び出し。
変数名は「"$color" + "-(クラス名)" + "-(backgroundなど(今回backgroundは基本省略))"」を基本とするが、
「ここの色だけ変えたい」(ex: 背景画像との色被りなど)に対応できるように
色が同じだったとしても相互に関連の薄い複数個所をまとめて定義しないこと。
*/
/* header */
/* searchButton(gradation)  https://www.webcreatorbox.com/tech/sass-colours#sass-colour5 */
/* main */
/* sidebar */
/* footer */
/* commonBorder */
/* 
backgroundImage
参考:https://web-guided.com/376/
*/
/* 
タイポ防止。呼び出し時はファイル名.拡張子の記述でOKになる。
pで当てるのでパス注意。
参照はあくまでもstyle.cssからの参照であることに注意。
*/
/* @contentを使うことで、呼出時に他のbackgroundプロパティ追加できる。 */
/* 後から追加 */
/* underline   eatInの下を基準に。疑似要素afterで指定のこと*/
/* 個別への対応に巻き込んではいけない。他の関係ないprojectへの影響。 */
* {
  /* 
  aboutTexts  
  Robotoのときは$subFontなどで別途指定(_variables.scss)
  */
  font-family: "M+ 1m", Roboto, Arial, Meiryo, sans-serif;
  /* 
  borderBoxにして制御しやすく
  */
  box-sizing: border-box;
}
* h1 {
  font-size: 2.25rem;
}
* h2 {
  font-size: 2.5625rem;
}
* h3 {
  font-size: 1.375rem;
}

/* gridContainer(SP,Tb時はsidebar以外を含む)もこの中で制御。 */
/* 
l-wrapperで全体の調整
*/
.l-wrapper {
  /*
  右にできた余白を消す
  http://bashalog.c-brains.jp/15/06/26-170500.php
  */
  overflow: hidden;
}
@media screen and (min-width: 1025px) {
  .l-wrapper {
    overflow: initial;
  }
}

@media screen and (min-width: 1025px) {
  .gridContainer {
    display: grid;
    grid-template-columns: 80.8854166667% 19.1145833333%;
    grid-template-rows: 13.5625rem auto auto;
    grid-template-areas: "header sidebar" "main sidebar" "footer footer";
  }
}

/* PC時はDOM操作の後グリッドで配置 */
@media screen and (min-width: 1025px) {
  .l-header {
    grid-area: header;
  }
}

.l-main__service {
  /*
  左右の余白
  (ここでvwか…?　いや、スクロールバーのことを考えると%か。) 
  これにしてみる↓
  https://www.nxworld.net/sass-number-operations-and-functions.html
  そのサイズ指定の意味合いを考えて単位を選ぶこと。
  */
  padding: 20px 5.3333333333% 49px;
}
@media screen and (min-width: 1025px) {
  .l-main__service {
    padding-top: 120px;
    padding-bottom: 131px;
  }
}
@media screen and (min-width: 1025px) {
  .l-main {
    grid-area: main;
  }
}

.l-sidebar {
  /* 
  js-menu(sidebar)のサイズはここでまとめて行う
  ここをlとpにわけるとjsでの操作が面倒になると考えたため。
  */
  /* 最初はoverflow-x: hidden;にして消しておく */
  overflow-x: hidden;
  /* 
  layout 
  浮かせて手前に固定。topを0に指定することでドキュメントの左上に
  さらにp-access__dexcにz-indexを指定しているので
  そのままだとdescのみ手前に表示されてしまう
  そのためここでz-index(descより大きな値)を指定しておく 
  */
  position: fixed;
  top: 0;
  z-index: 1000;
  /* アニメーション 元要素で指定 なぜか効かない */
  transition: 0.5s;
  /* 状態の始点 */
  width: 0;
  right: 0;
  /* is-open時 */
  /* PC時 */
}
.l-sidebar.is-open {
  width: 100%;
}
@media screen and (min-width: 1025px) {
  .l-sidebar {
    /* width:0;を消し、transitionも無効化する */
    width: 100%;
    transition: none;
    grid-area: sidebar;
    /* fixedを解除 */
    position: initial;
  }
}

@media screen and (min-width: 1025px) {
  .l-footer {
    grid-area: footer;
  }
}

/* 
恐らく十分に見えやすい大きさだと思われるのでpxで指定。
後で実験してみる。 
*/
.c-closeButton {
  /* 疑似要素出現させる */
  display: flex;
  /* テキストを消す */
  font-size: 0;
  /* 三平方 */
  width: 45.2544px;
  /* 高さ＝厚み */
  height: 6px;
  /* color */
  background-color: #707070;
  /* angle */
  transform: rotate(45deg);
  /* cursor変化 */
  cursor: pointer;
}
.c-closeButton::before {
  content: "";
  /* 同一の内容を指定し、角度だけ変えてあげる */
  font-size: 0;
  width: 45.2544px;
  height: 6px;
  background-color: #707070;
  /* angle */
  transform: rotate(90deg);
}

.c-coverLayer {
  /* Color アルファ値使う場合はprojectで再度指定のこと。*/
  background-color: #000;
}

/* 
根本的なデザインの変更以外はここで指定せず、projectで指定すること。
*/
/* 
根本的なデザインの変更以外はここで指定せず、projectで指定すること。
*/
.c-searchBox {
  /* shape */
  border-radius: 10px;
}

/* 
根本的なデザインの変更以外はここで指定せず、projectで指定すること。
*/
.c-searchButton {
  /* 
  bassColor
  (searchButtonは使い回す予定がないのでここでスタイリング) 
  */
  background: linear-gradient(-90deg, #F2EDE9, #DED8D3) fixed;
  /* shape */
  border-radius: 10px;
  border: 1px solid #707070;
  /* size */
  width: 4.875rem;
  /* 改行禁止 */
  white-space: nowrap;
  /* text button内テキストはやや小さいためfsz指定必要*/
  font-size: 1rem;
  font-weight: bold;
  color: #707070;
}

/* p-header__menuOpenerも以下のテンプレートを使用している */
.c-title {
  /* 
  letter 
  ここに詳細まで(font-size等)書くかは
  まったく同じスタイルで使い回される頻度により判断
  */
  font-family: Roboto, "M+ 1m", Arial, Meiryo, sans-serif;
  font-weight: bold;
  /* 色は個別のプロジェクト内で指定 */
}

/* 不要になったため削除のこと */
/* 
基本は記述なし。
幅の変更などはp-access__map__sourceで行うため。 
*/
/* &__menuOpenerは.c-titleを使用している */
.p-header {
  /* Size*/
  width: 100%;
  height: 13.5625rem;
  /*
  Space 
  tb時もあまり変わらず(=viewportで変動せず)
  長い文章が入るとは考えにくい(?)のでpxで指定し固定。
  */
  padding: 14px 16px 40px;
  /* baseColor */
  background-color: #FFF7EF;
}
@media screen and (min-width: 1025px) {
  .p-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 100%;
    padding: 0 31px 0 65px;
  }
}
.p-header__menuOpener {
  /* letter */
  font-size: 1.25rem;
  /* color */
  color: #707070;
  /* aboutText */
  line-height: 1.625rem;
  /* 選択できなくする cursorはpointerに*/
  user-select: none;
  cursor: pointer;
  /* 
  layout
  block要素、幅をコンテンツサイズに、右寄せ。
  width: fit-contentはIE対応していないため注意。
  marginは基本的にutilityで制御しているが、今回はlayout的意味合いが強いためここで。
  */
  display: block;
  width: fit-content;
  margin-left: auto;
}
@media screen and (min-width: 600px) {
  .p-header__menuOpener {
    font-size: 2.125rem;
  }
}
@media screen and (min-width: 1025px) {
  .p-header__menuOpener {
    display: none;
  }
}
.p-header__title {
  /* letter */
  font-size: 2.5rem;
  /* color */
  color: #707070;
  /* aboutText */
  line-height: 3.3125rem;
  /* layout(左右中央ぞろえ) */
  display: flex;
  justify-content: center;
}
@media screen and (min-width: 1025px) {
  .p-header__title {
    height: fit-content;
    font-size: 4rem;
  }
}
.p-header__search {
  /* layout(左右中央ぞろえ) */
  display: flex;
  justify-content: center;
  position: relative;
}
@media screen and (min-width: 1025px) {
  .p-header__search {
    height: fit-content;
  }
}
@media screen and (min-width: 1025px) {
  .p-header__search__searchIcon {
    /* position */
    position: absolute;
    top: 35%;
    left: 2%;
  }
}
.p-header__search__searchIcon::before {
  position: absolute;
  top: 35%;
  margin-left: 1%;
}
.p-header__search__searchBox {
  /* 
  Size 
  */
  width: 14.375rem;
  height: 2.875rem;
  /* 形状を決定するborderRadiusはコンポーネントで指定してある */
  /* border 線もおそらく変える必要ないのでpxで */
  border: solid 1px #707070;
  /* 入力開始位置 */
  padding-left: 2.5rem;
}
@media screen and (min-width: 600px) {
  .p-header__search__searchBox {
    width: 24.75rem;
    height: 2.875rem;
  }
}
@media screen and (min-width: 600px) {
  .p-header__search__searchButton {
    width: 8.5rem;
  }
}

.p-TopHead {
  /* 
  Size
  */
  height: 17.8125rem;
  /* BackGround */
  background-image: url("../images/mainvisual-pc.jpg");
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: cover;
  /* 
  @mixin内で@contentを記述しているため、他のプロパティの追加が可能
  ここに記述したものは@contentの{}内に書かれていることになる。 
  */
  /* 
  背景縮小
  background-size: cover;  縦横比保持。覆うように。(大)
  background-size: contain; 縦横比保持。収まるように。(小)
  どちらかを値指定。他方をauto(元の比率を維持)とすることもできる。
  */
  background-size: cover;
  /* 
  左右の余白 (上下は中央寄せで対応かな)
  →but,予想外に多くの文字が入る可能性やユーザーの文字拡大の可能性も踏まえて
  上下左右に取っておこうか。
  その意図なら固定値でいいはずなのでpxで指定　
  */
  padding: 25px;
  /* 上下中央揃え */
  display: flex;
  align-items: center;
}
@media screen and (min-width: 1025px) {
  .p-TopHead {
    /* 文字を3倍に拡大したとしても収まるため固定値で */
    height: 530px;
  }
}
.p-TopHead__title {
  /* Color */
  color: #FFF;
}
@media screen and (min-width: 1025px) {
  .p-TopHead__title {
    font-size: 2.5rem;
  }
}

.p-service {
  /* Heightはそれぞれで指定。(SPとTB以上で書き分けの必要がなくなる) */
  /* TB時 横並び */
  /* PC時 */
}
@media screen and (min-width: 600px) {
  .p-service {
    /* 
    配置
    flexで要素を横並び。さらにjustify-contentで横軸中央寄せ
    左右の余白はlayoutで対応済み
    */
    display: flex;
    justify-content: center;
  }
}
@media screen and (min-width: 1025px) {
  .p-service {
    justify-content: space-around;
  }
}
.p-service__content {
  /* 
  Size 
  iPhone5/SEの高さ568pxよりやや小さめをmin-heightに指定。
  */
  min-height: 550px;
  /* flexで並べる */
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  /* 
  space
  */
  padding: 11px;
  /* 
  TakeOut,EatInの書き分け必要がある部分はutility(_u-service.scss)にて
  */
}
@media screen and (min-width: 600px) {
  .p-service__content {
    height: 85vh;
  }
}
@media screen and (min-width: 1025px) {
  .p-service__content {
    width: 45%;
    min-height: 1196px;
    height: initial;
    padding: 20px;
  }
}
@media screen and (min-width: 600px) {
  .p-service__content__title {
    font-size: 2.75rem;
  }
}
@media screen and (min-width: 1025px) {
  .p-service__content__title {
    /* 十分に文字が大きい(これ以上大きくなると可読性低くなる)と考えて固定値指定 */
    font-size: 80px;
  }
}
.p-service__content__detail__desc {
  /* baseColor */
  background-color: #FFF;
  /* opacity */
  opacity: 0.8;
  /* space 予期しない操作による崩れを防ぐためショートハンドは使わず記述 */
  padding-top: 19px;
  padding-left: 10px;
  padding-bottom: 20px;
  padding-right: 14px;
}
@media screen and (min-width: 1025px) {
  .p-service__content__detail__desc__title {
    font-size: 1.5rem;
  }
}

.p-access {
  /* 
  aboutPosition
  (relative指定で子要素をハンドリングしやすく)
  */
  position: relative;
  /* 重ね順:下からmask,overlay,desc */
}
.p-access__overlay {
  /* 濃い黒 */
  opacity: 0.29;
  /* size 幅は親(p-access)に合わせ、高さはカンプに基づいて%指定 */
  width: 100%;
  height: 60.0578871201%;
  /* layout absoluteで重ねる */
  position: absolute;
  z-index: 100;
}
@media screen and (min-width: 600px) {
  .p-access__overlay {
    height: 100%;
  }
}
@media screen and (min-width: 1025px) {
  .p-access__overlay {
    width: 61.1719253059%;
  }
}
.p-access__mask {
  /* 薄い黒(カンプは白指定だが、不透明度を反転(?)させて黒指定) */
  opacity: 0.4;
  /* size */
  width: 100%;
  height: 100%;
  /* layout absoluteで重ねる */
  position: absolute;
  z-index: 10;
}
.p-access__map {
  /* 
  divは初期値でwidth100%なので指定必要なし
  but iframeタグで挿入したmapのソースを幅変更のこと
  */
  position: relative;
  height: fit-content;
}
@media screen and (min-width: 1025px) {
  .p-access__map {
    /* 下の謎の余白を半ば強引に消した */
    min-height: 646px;
  }
}
.p-access__map__source {
  /* Size
  ・親のmap(divタグ)のwidthに合わせる
  */
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.p-access__map__desc {
  /* aboutPosition  (mapの上に重なる形に→z-indexで最前面に配置)*/
  position: relative;
  z-index: 1000;
  /* space */
  padding: 42px 40px 51px;
  height: fit-content;
}
@media screen and (min-width: 1025px) {
  .p-access__map__desc {
    width: 61.1719253059%;
    /* paddingをremで指定すると文字が大きいほど余白大きいということになるので、暫定で固定値 */
    padding: 83px 134px 40px 119px;
  }
}
.p-access__map__desc__title {
  /* letter */
  font-size: 1.875rem;
  /* color */
  color: #FFF;
  /* 疑似要素を下に */
  display: flex;
  flex-direction: column;
  /* underLine */
}
.p-access__map__desc__title::after {
  content: "";
  height: 0.25rem;
  width: 2.118125rem;
  background-color: #FFF;
  width: 4.6875rem;
  height: 0.125rem;
}

/* 
_nav以下については末尾で別途記載。ネストの深化を防ぐため。
レスポンシブ対応してもあまりスタイルが変わらないからこそできることかな??
*/
.p-sidebar {
  /*
  position
   __contentを__maskの上に重ねるために
   position:relative;. (position多用は危険らしい…？)
  */
  position: relative;
  /* 
  Size(子はこれを100%指定で受け継ぐ)
  基本的にl-sidebarで制御してるが、
  高さはここ依存しているので消さないでね。
  */
  height: 100vh;
  /* flex-endでcontentを右に。__maskの幅消えるので指定のこと */
  display: flex;
  justify-content: flex-end;
  /* p-sidebar */
}
.p-sidebar__mask {
  /* baseColor アルファ値使う(50%)ので、rgbaで再度指定 */
  background-color: rgba(0, 0, 0, 0.5);
  /* Size 高さ指定 親に合わせる*/
  height: 100%;
  /* 親にflexかけたら幅消えたので指定 */
  width: 100%;
}
.p-sidebar__content {
  /* 
  position
  absoluteで浮かせる。
  top:0;でrelative付きの親の左上へ。__maskと重なる。
  */
  position: absolute;
  top: 0;
  /* 
  Size 
  幅指定 percentageで(余白も%指定の必要が出てくる)
  高さ指定 親に合わせる
  */
  width: 87.4666666667%;
  height: 100%;
  /* baseColor */
  background-color: #F2EDE9;
  /* 
  space 
  相対値で指定すると文字大きくなると表示領域狭くなるということが生じるので、pxで。
  傾けた要素は元の状態に座標があるので注意。
  下も暫定で上と同じ値をつけておく 
  */
  padding: 50px 17px 25px 47px;
  /* layout (navとcloseButtonをflexで配置) */
  display: flex;
  justify-content: space-between;
  /* 
  スクロールバー表示
  */
  overflow-y: scroll;
  /* 
  &__nav以下については視認性を高めるため下で別途スタイリング。
  */
  /* p-sidebar__content */
}
.p-sidebar__content__title {
  display: none;
}
@media screen and (min-width: 1025px) {
  .p-sidebar__content__title {
    display: block;
    position: absolute;
    font-size: 2.125rem;
    /* font-weightはcomponentで指定済み */
    color: #707070;
  }
}
@media screen and (min-width: 1025px) {
  .p-sidebar__content__closeButton {
    display: none;
  }
}
@media screen and (min-width: 600px) {
  .p-sidebar__content {
    width: 44.0047961631%;
  }
}
@media screen and (min-width: 1025px) {
  .p-sidebar__content {
    width: 100%;
    overflow-y: visible;
    padding: 82px 47px 25px 12.5340599455%;
  }
}
@media screen and (min-width: 1025px) {
  .p-sidebar {
    height: 100%;
  }
}

/* 
sidebarのcontent__nav以下のスタイリングはここで
*/
.p-sidebar__content__nav {
  /* margin設定等によるはみ出しを防ぐ→直感的に余白付けられる(要学習) */
  height: fit-content;
  /* 上部余白 文字サイズにそろえる必要がないので固定値*/
  padding-top: 162px;
  /* 以下クラス名ついてないので注意 */
}
.p-sidebar__content__nav__classify {
  /* aboutLetter */
  font-size: 1.5rem;
  font-weight: bold;
  color: #707070;
}
.p-sidebar__content__nav ul {
  /* space(基本的にはmarginで行っている) */
  padding-bottom: 2.125rem;
}
.p-sidebar__content__nav ul li {
  /* aboutLetters */
  list-style: none;
}
.p-sidebar__content__nav ul li a {
  /* aboutLetter */
  font-size: 1.25rem;
  text-decoration: none;
  color: #707070;
}
.p-sidebar__content__nav ul li a:hover {
  /* hover */
  opacity: 0.6;
}

.p-footer {
  /* baseColor */
  background-color: #9D8670;
  /* 
  Size 
  widthは指定必要なしかな。
  heightはとりあえずカンプそのままをremで指定しておく
  */
  height: 9.375rem;
  /* layout 中央揃え*/
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* 
タイトル部以外のテキストについては基本的な点をfoundationでスタイリングし、
utilityで上書きしていくことにする。
テキストに関してはcomponentとprojectのカスケーディングを使うと冗長になると考えたため。

For the text, I will style the basic points with foundation 
and overwrite it with utility. 
I thought it would be redundant to use component and project cascading.
*/
.u-text {
  /* 
  多少面倒だけど、それぞれにスタイリングしていく
  →背景画像変えるなどで文字見づらくなった時の対応が容易。
  */
}
.u-text--serviceDesc {
  /* 末尾が--serviceDescのクラスは存在しないため、この領域には記述禁止 */
}
.u-text--serviceDesc--takeOut {
  /* minHeight */
  min-height: 4.5rem;
  /* Size */
  font-size: 1rem;
  /* Color */
  color: #3C2A10;
}
.u-text--serviceDesc--eatIn {
  /* minHeight */
  min-height: 4.5rem;
  /* Size */
  font-size: 1rem;
  /* Color */
  color: #3C2A10;
}
.u-text--accessDesc {
  /* Size */
  font-size: 0.875rem;
  /* Color */
  color: #FFF;
}
.u-text--footerInfo {
  /* Size */
  font-size: 1.25rem;
  /* Color */
  color: #FFF;
}
.u-text--copyright {
  /* Size */
  font-size: 0.875rem;
  /* Color */
  color: #FFF;
}

.p-header__title {
  margin-bottom: 38px;
}
@media screen and (min-width: 1025px) {
  .p-header__title {
    margin-bottom: 0;
    margin-right: 20px;
  }
}

.p-header__search__searchBox {
  margin-right: 12px;
}
@media screen and (min-width: 600px) {
  .p-header__search__searchBox {
    margin-right: 14px;
  }
}

.p-service__content__title::after {
  margin-top: 19.3px;
}
@media screen and (min-width: 1025px) {
  .p-service__content__title::after {
    margin-top: 34.5px;
  }
}

/* service */
.p-service__content:not(:last-child) {
  margin-bottom: 20px;
  /* 横並び後はbottomではなくrightに */
}
@media screen and (min-width: 600px) {
  .p-service__content:not(:last-child) {
    margin-bottom: 0;
    margin-right: 41px;
  }
}
@media screen and (min-width: 1025px) {
  .p-service__content:not(:last-child) {
    margin-right: 0;
  }
}

.p-service__content__detail__desc:not(:last-child) {
  margin-bottom: 10px;
}

.p-service__content__detail__desc__title {
  margin-bottom: 20px;
}

.p-access__map__desc__title::after {
  margin-top: 20px;
  margin-bottom: 20px;
}
@media screen and (min-width: 1025px) {
  .p-access__map__desc__title::after {
    margin-top: 55.5px;
    margin-bottom: 63.5px;
  }
}

.p-sidebar__content__nav__classify {
  margin-left: 46px;
  margin-bottom: 2.5rem;
}
@media screen and (min-width: 1025px) {
  .p-sidebar__content__nav__classify {
    margin-left: 0;
  }
}
.p-sidebar__content__nav ul {
  margin-left: 66px;
}
@media screen and (min-width: 1025px) {
  .p-sidebar__content__nav ul {
    margin-left: 20px;
  }
}
.p-sidebar__content__nav ul li:not(:last-child) {
  margin-bottom: 1.375rem;
}

.u-text--footerInfo {
  margin-bottom: 34px;
}

.u-service__content--takeOut {
  background-image: url("../images/three-burgers-on-brown-wooden-tray-between-white-ceramic.png");
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: cover;
}
.u-service__content--eatIn {
  background-image: url("../images/bacon-burger.png");
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: cover;
}
.u-service__content__title--takeOut {
  /* Color */
  color: #EAEAEA;
}
@media screen and (min-width: 600px) {
  .u-service__content__title--takeOut {
    display: flex;
    flex-direction: column;
  }
  .u-service__content__title--takeOut::after {
    content: "";
    height: 0.25rem;
    width: 2.118125rem;
    background-color: #FFF;
    width: 2.25rem;
  }
}
@media screen and (min-width: 600px) and (min-width: 1025px) {
  .u-service__content__title--takeOut::after {
    width: rem(63);
  }
}
.u-service__content__title--eatIn {
  /* Color */
  color: #FFF;
  /* 疑似要素を下に */
  display: flex;
  flex-direction: column;
  /* UnderLine */
}
.u-service__content__title--eatIn::after {
  content: "";
  height: 0.25rem;
  width: 2.118125rem;
  background-color: #FFF;
}
@media screen and (min-width: 600px) {
  .u-service__content__title--eatIn::after {
    width: 2.25rem;
  }
}
@media screen and (min-width: 1025px) {
  .u-service__content__title--eatIn::after {
    width: rem(63);
  }
}

/* Component--------------------- */
/* Project------------------------ */
/* Utility----------------------- */

/*# sourceMappingURL=style.css.map */
